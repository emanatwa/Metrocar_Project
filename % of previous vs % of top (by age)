WITH user_ride_status AS (
    SELECT
        user_id
    FROM ride_requests
    GROUP BY user_id
),
-- downloads table 

total_app_downloads as (
  SELECT 
	 app_download_key
  FROM app_downloads
	GROUP BY 1),
 -- downloads table joined with signups table
 
no_dowloads_before_signups as
  (SELECT 
  	COUNT(*) as total_downloads, 
  	COUNT(DISTINCT s.user_id) as total_signups_from_downloads,
   s.age_range
  FROM total_app_downloads a
  LEFT JOIN signups s
  ON a.app_download_key = s.session_id
  GROUP BY 3),

-- rides_requested table 

totals as (SELECT
    COUNT(*) AS total_users_signed_up,
    COUNT(DISTINCT urs.user_id) AS total_users_ride_requested, 
           
           s.age_range
FROM signups s
LEFT JOIN user_ride_status urs ON
    s.user_id = urs.user_id
          group by 3), 
    
-- drivers_acceptance


drivers_acceptance as (SELECT
    COUNT(DISTINCT r.user_id) AS users_requesting_a_ride,
    COUNT(DISTINCT
        CASE
            WHEN accept_ts IS NOT NULL
            THEN r.user_id
        END
    ) AS drivers_acceptance_rate, 
  s.age_range
FROM ride_requests r 
  LEFT JOIN signups s
	ON s.user_id = r.user_id
  GROUP BY  s.age_range
   ),

-- ride_ completion

ride_completion as 
 (SELECT
    COUNT(DISTINCT r.user_id) AS users_requesting_a_ride,
    COUNT(DISTINCT
        CASE
            WHEN dropoff_ts IS NOT NULL
            THEN r.user_id
        END
    ) AS users_completing_a_ride, 
  s.age_range
FROM ride_requests r 
  LEFT JOIN signups s
	ON s.user_id = r.user_id
  GROUP BY  s.age_range

   ),



-- payment_completion 
payment_completion as 
  (SELECT
    COUNT(DISTINCT r.user_id) AS users_requesting_a_ride,
    COUNT(DISTINCT
        CASE
            WHEN transaction_ts IS NOT NULL
            THEN r.user_id
        END
    ) AS payment_completion, 
  s.age_range
FROM ride_requests r 
  LEFT JOIN signups s
	ON s.user_id = r.user_id
  LEFT JOIN transactions t
         ON r.ride_id = t.ride_id
   GROUP BY  s.age_range
   ),

reviews as 
(SELECT
    COUNT(DISTINCT r.user_id) AS users_requesting_a_ride,
    COUNT(DISTINCT
        CASE
            WHEN review_id IS NOT NULL
            THEN r.user_id
        END
    ) AS review_rate, 
  s.age_range
  FROM ride_requests r
  LEFT JOIN signups s
	ON s.user_id = r.user_id
  LEFT JOIN reviews re
  ON r.ride_id = re.ride_id
  GROUP BY s.age_range
   ),

    
funnel_t as ( SELECT
  1 AS funnel_step,
     'app_downloads' AS funnel_name,
    total_downloads AS value, 
             age_range as age
FROM no_dowloads_before_signups 

UNION 

SELECT 
 
	2 AS funnel_step,
           	'signups' AS funnel_name,
  total_users_signed_up AS value, 
             age_range as age
FROM totals 

UNION

SELECT 
	3 AS funnel_step,
          	'ride_requested' AS funnel_name,
	total_users_ride_requested AS value, 
             age_range as age
FROM totals

UNION

SELECT 
	4 AS funnel_step,
              	'driver_acceptance' AS funnel_name,
	drivers_acceptance_rate AS value, 
             age_range as age
FROM drivers_acceptance
            

UNION

SELECT 
	5 AS funnel_step,
            	'rides_completed' AS funnel_name,
	users_completing_a_ride AS value,
             age_range as age
FROM ride_completion
             

UNION

SELECT 
	6 AS funnel_step,
           	'payment_completion' AS funnel_name,
	payment_completion AS value,
             age_range as age
FROM payment_completion


UNION

SELECT 
	7 AS funnel_step,
              	'user_review' AS funnel_name,
	review_rate AS value,
             age_range as age
FROM reviews
)

SELECT  
f.funnel_step, 
f.funnel_name, 
f.value,   
f.age,
value::float / LAG(value) OVER (
        ORDER BY funnel_step
    ) AS percent_of_previous,
    
   value::float / FIRST_VALUE(value) OVER (
        ORDER BY funnel_step
    ) as percent_of_top
    


FROM funnel_t f


ORDER BY funnel_step DESC ; 
